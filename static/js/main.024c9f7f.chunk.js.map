{"version":3,"sources":["components/game-racing.jsx","components/game-snake.jsx","App.js","serviceWorker.js","index.js"],"names":["Racing","cellSize","canvasWidth","props","canvasHeight","state","gameGoing","carLocation","barriers","x","y","Math","floor","random","acceleration","crash","carOnTheLeft","carOnTheRight","maxBarriersAmount","carHeight","carWidth","speed","playerScore","moveBarriers","i","length","setState","addBarrier","push","upSpeed","steeringWheel","document","onkeydown","event","keyCode","onkeyup","letsGo","intervalMove","setInterval","intervalAdd","intervalSpeed","ctx","getElementById","getContext","this","clearRect","fillRect","clearInterval","canvas","width","height","img","Image","src","onload","drawImage","font","textPositionHorizintally","measureText","fillText","drawFrame","btnClassName","canvasClassName","Fragment","className","onClick","id","ref","React","Component","Snake","body","apple","moveDirection","moveDirectionChanged","uroboros","moveSnake","prevBody","newBody","toRight_headX","toRight_headY","toTop_headX","toTop_headY","toLeft_headX","toLeft_headY","toBottom_headX","toBottom_headY","setApple","changeMoveDirection","item","fillStyle","newBodyPart","head","slice","find","evaluation","txt","App","to","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAEqBA,E,2MAEjBC,SAAW,G,EACXC,YAAc,EAAKC,MAAMD,Y,EACzBE,aAAc,EAAKD,MAAMC,a,EAEzBC,MAAQ,CACJC,WAAW,EACXC,YAAa,EACbC,SAAU,CAAC,CACPC,EAAG,EACHC,EAAGC,KAAKC,MAAOD,KAAKC,MAAMD,KAAKE,SAAS,EAAKX,aAAc,EAAKD,UAAU,EAAKA,WAEnFa,cAAc,EACdC,OAAO,EACPC,cAAc,EACdC,eAAe,EACfC,kBAAmB,GACnBC,UAAW,EACXC,SAAU,EACVC,MAAO,EACPC,YAAa,G,EAGjBC,aAAe,WAKX,IALkB,IAAD,EACwE,EAAKlB,MAAtFG,EADS,EACTA,SAAUM,EADD,EACCA,aAAcP,EADf,EACeA,YAAaa,EAD5B,EAC4BA,SAAUD,EADtC,EACsCA,UAAWE,EADjD,EACiDA,MAAOC,EADxD,EACwDA,YADxD,iBAETrB,EAFS,EAETA,SAAUC,EAFD,EAECA,YAAaE,EAFd,EAEcA,aAGtBoB,EAAI,EAAGA,EAAIhB,EAASiB,OAAQD,IAG5BhB,EAASgB,GAAGd,EAAIN,IACjB,EAAKsB,SAAS,CACVJ,YAAaA,EAAY,IAE7Bd,EAASgB,GAAGd,EAAI,EAChBF,EAASgB,GAAGf,EAAIE,KAAKC,MAAOD,KAAKC,MAAMD,KAAKE,SAASX,GAAcD,GAAUA,GAS7EO,EAASgB,GAAGd,EAJVI,EAIcN,EAASgB,GAAGd,EAAIW,EAAQ,GAHxBb,EAASgB,GAAGd,EAAIW,EAQ5Bb,EAASgB,GAAGd,GAAKN,EAAee,EAAYlB,GACzCO,EAASgB,GAAGf,GAAKF,GACjBC,EAASgB,GAAGf,EAAIF,EAAca,EAAWnB,GAEhD,EAAKyB,SAAS,CACVX,OAAO,EACPT,WAAW,IAMvB,EAAKoB,SAAS,CACVlB,SAAUA,K,EAIlBmB,WAAa,WAAO,IAAD,EACyB,EAAKtB,MAArCG,EADO,EACPA,SAAUU,EADH,EACGA,kBAEdV,EAASiB,OAASP,GAClBV,EAASoB,KACL,CACInB,EAAkD,GAA/CE,KAAKC,MAAOD,KAAKC,MAAoB,IAAdD,KAAKE,UAAe,IAC9CH,EAAG,K,EAMnBmB,QAAU,WAAO,IACLR,EAAU,EAAKhB,MAAfgB,MAEJA,EAAQ,IACR,EAAKK,SAAS,CACVL,MAAOA,EAAQ,K,EAK3BS,cAAgB,WAAM,IACV7B,EADU,eACVA,SACR8B,SAASC,UAAY,SAACC,GAClB,OAAQA,EAAMC,SACV,KAAK,GACK,EAAK7B,MAAMW,cACb,EAAKU,SAAS,CACVnB,YAAa,EAAKF,MAAME,YAAcN,IAGlD,MAEA,KAAK,GACK,EAAKI,MAAMY,eACb,EAAKS,SAAS,CACVnB,YAAa,EAAKF,MAAME,YAAcN,IAGlD,MAEA,KAAK,GACD,EAAKyB,SAAS,CACVZ,cAAc,MAQ9BiB,SAASI,QAAU,SAACF,GAChB,OAAQA,EAAMC,SACV,KAAK,GACD,EAAKR,SAAS,CACVZ,cAAc,O,EAqDlCsB,OAAS,WACL,EAAKV,SAAS,CACVpB,WAAW,EACXC,YAAa,EACbC,SAAU,GACVM,cAAc,EACdC,OAAO,EACPC,cAAc,EACdC,eAAe,EACfC,kBAAmB,GACnBC,UAAW,EACXC,SAAU,EACVC,MAAO,EACPC,YAAa,IAEjB,EAAKQ,gBACL,EAAKO,aAAeC,aAAY,kBAAM,EAAKf,iBAAgB,IAC3D,EAAKgB,YAAcD,aAAY,kBAAM,EAAKX,eAAc,KACxD,EAAKa,cAAgBF,aAAY,kBAAM,EAAKT,YAAW,M,yEA5DhDtB,EAAaC,GACpB,IAAMiC,EAAMV,SAASW,eAAe,UAAUC,WAAW,MAD1B,EAGCC,KAAKvC,MAA7Be,EAHuB,EAGvBA,SAAUD,EAHa,EAGbA,UACVlB,EAAwC2C,KAAxC3C,SAAUC,EAA8B0C,KAA9B1C,YAAaE,EAAiBwC,KAAjBxC,aAG/BqC,EAAII,UAAU,EAAG,EAAG3C,EAAaE,GAGjCqC,EAAIK,SAAUvC,EAAaH,EAAee,EAAUlB,EAAUmB,EAASnB,EAAUG,GAGjF,IAAK,IAAIoB,EAAI,EAAGA,EAAIoB,KAAKvC,MAAMG,SAASiB,OAAQD,IAC5CiB,EAAIK,SAAStC,EAASgB,GAAGf,EAAED,EAASgB,GAAGd,EAAET,EAASA,GAIlD2C,KAAKvC,MAAME,aAAe,IAAiC,IAA5BqC,KAAKvC,MAAMW,aAC1C4B,KAAKlB,SAAS,CACVV,cAAc,IAGZ4B,KAAKvC,MAAME,YAAc,IAAiC,IAA5BqC,KAAKvC,MAAMW,cAC/C4B,KAAKlB,SAAS,CACVV,cAAc,IAKlB4B,KAAKvC,MAAME,aAAeL,EAAYkB,EAASnB,IAAyC,IAA7B2C,KAAKvC,MAAMY,cACtE2B,KAAKlB,SAAS,CACVT,eAAe,IAGb2B,KAAKvC,MAAME,YAAcL,EAAYkB,EAASnB,IAAyC,IAA7B2C,KAAKvC,MAAMY,eAC3E2B,KAAKlB,SAAS,CACVT,eAAe,M,8BA4BvB8B,cAAcH,KAAKP,cACnBU,cAAcH,KAAKL,aACnBQ,cAAcH,KAAKJ,eAGnB,IAAMQ,EAASjB,SAASW,eAAe,UACjCD,EAAMO,EAAOL,WAAW,MAE9BF,EAAII,UAAU,EAAG,EAAGG,EAAOC,MAAOD,EAAOE,QAEzC,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAM,gIAEVF,EAAIG,OAAS,WACTb,EAAIc,UAAUJ,EAAI,EAAE,EAAEH,EAAOC,MAAMD,EAAOE,W,0CAK9C,IAAMF,EAASjB,SAASW,eAAe,UACjCD,EAAMO,EAAOL,WAAW,MAE9BF,EAAIe,KAAO,aACX,IACMC,EAA2BT,EAAOC,MAAM,EAAIR,EAAIiB,YADpC,4GAC2DT,MAAM,EACnFR,EAAIkB,SAFc,2GAEMF,EAA0BT,EAAOE,OAAO,K,2CAI9C,IAAD,EACiBN,KAAKvC,MAA/BE,EADS,EACTA,YAAaC,EADJ,EACIA,SAEhBoC,KAAKvC,MAAMU,MAIZ6B,KAAK7B,QAHL6B,KAAKgB,UAAWrD,EAAaC,K,6CAQjCuC,cAAcH,KAAKP,cACnBU,cAAcH,KAAKL,aACnBQ,cAAcH,KAAKJ,iB,+BAInB,IAAIqB,EACAC,EAWJ,OATKlB,KAAKvC,MAAMC,WACZuD,EAAe,sBACfC,EAAkB,mBAGlBD,EAAe,eACfC,EAAkB,QAIlB,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,eACX,0FACA,0BAAMA,UAAU,gBAAhB,gDAA0CpB,KAAKvC,MAAMiB,cAEzD,4BAAQ0C,UAAYH,EAAeI,QAASrB,KAAKR,QAAjD,OACA,4BAAQ8B,GAAG,SAASF,UAAWF,EAAiBK,IAAI,SAASlB,MAAOL,KAAKzC,MAAMD,YAAagD,OAAQN,KAAKzC,MAAMC,oB,GA3Q3FgE,IAAMC,WCArBC,E,2MAEjBrE,SAAW,G,EACXC,YAAc,EAAKC,MAAMD,Y,EACzBE,aAAc,EAAKD,MAAMC,a,EAEzBC,MAAQ,CACJC,WAAW,EACXiE,KAAM,GACNC,MAAO,GACPC,cAAe,UACfC,sBAAsB,EACtBrD,MAAO,EACPC,YAAa,EACbP,OAAO,EACP4D,UAAU,G,EA8GdC,UAAY,WAAO,IAAD,EACkB,EAAKvE,MAA7BkE,EADM,EACNA,KAEFM,EAAWN,EACbO,EAAU,GAEd,OANc,EACAL,eAMV,IAAK,UACD,IAAMM,EAAgBF,EAAS,GAAGpE,EAAE,EAC9BuE,EAAgBH,EAAS,GAAGnE,EAClCoE,EAAQ,GAAK,CACTrE,EAAGsE,EACHrE,EAAGsE,GAEP,IAAK,IAAIxD,EAAI,EAAGA,EAAI+C,EAAK9C,OAAQD,IAC7BsD,EAAQtD,GAAKqD,EAASrD,EAAI,GAE9B,EAAKE,SAAS,CACV6C,KAAMO,IAEd,MACA,IAAK,QACD,IAAMG,EAAcJ,EAAS,GAAGpE,EAC1ByE,EAAcL,EAAS,GAAGnE,EAAE,EAClCoE,EAAQ,GAAK,CACTrE,EAAGwE,EACHvE,EAAGwE,GAEP,IAAK,IAAI1D,EAAI,EAAGA,EAAI+C,EAAK9C,OAAQD,IAC7BsD,EAAQtD,GAAKqD,EAASrD,EAAI,GAE9B,EAAKE,SAAS,CACV6C,KAAMO,IAEd,MACA,IAAK,SACD,IAAMK,EAAeN,EAAS,GAAGpE,EAAE,EAC7B2E,EAAeP,EAAS,GAAGnE,EACjCoE,EAAQ,GAAK,CACTrE,EAAG0E,EACHzE,EAAG0E,GAEP,IAAK,IAAI5D,EAAI,EAAGA,EAAI+C,EAAK9C,OAAQD,IAC7BsD,EAAQtD,GAAKqD,EAASrD,EAAI,GAE9B,EAAKE,SAAS,CACV6C,KAAMO,IAEd,MACA,IAAK,WACD,IAAMO,EAAiBR,EAAS,GAAGpE,EAC7B6E,EAAiBT,EAAS,GAAGnE,EAAE,EACrCoE,EAAQ,GAAK,CACTrE,EAAG4E,EACH3E,EAAG4E,GAEP,IAAK,IAAI9D,EAAI,EAAGA,EAAI+C,EAAK9C,OAAQD,IAC7BsD,EAAQtD,GAAKqD,EAASrD,EAAI,GAE9B,EAAKE,SAAS,CACV6C,KAAMO,IAOlB,EAAKpD,SAAS,CACVgD,sBAAsB,K,EAa9BtC,OAAS,WACL,EAAKV,SAAS,CACVpB,WAAW,EACXiE,KAAM,CACF,CAAC9D,EAAG,EAAGC,EAAG,GACV,CAACD,EAAG,EAAGC,EAAG,IAEd+D,cAAe,UACfnD,YAAa,EACbP,OAAO,EACP4D,UAAU,IAEd,EAAKY,WACL,EAAKhD,YAAcD,aAAY,kBAAM,EAAKsC,cAAa,KACvD,EAAKY,uB,2EAxML,IAAM/C,EAAMV,SAASW,eAAe,UAAUC,WAAW,MAFjD,EAI6BC,KAAKvC,MAAlCkE,EAJA,EAIAA,KAAMC,EAJN,EAIMA,MAAOlD,EAJb,EAIaA,YACbrB,EAAwC2C,KAAxC3C,SAAUC,EAA8B0C,KAA9B1C,YAAaE,EAAiBwC,KAAjBxC,aAG/BqC,EAAII,UAAU,EAAG,EAAG3C,EAAaE,GARzB,2BAWR,YAAiBmE,EAAjB,+CAAuB,CAAC,IAAfkB,EAAc,QACfA,IAASlB,EAAK,GACd9B,EAAIiD,UAAY,QAGhBjD,EAAIiD,UAAY,QAEpBjD,EAAIK,SAAU2C,EAAKhF,EAAER,EAASwF,EAAK/E,EAAET,EAASA,EAASA,IAlBnD,kFA0BR,GAAKsE,EAAK,GAAG9D,IAAM+D,EAAM/D,GAAK8D,EAAK,GAAG7D,IAAM8D,EAAM9D,EAAG,CACjD,IAAIoE,EAAUP,EACVoB,EAAcb,EAAQA,EAAQrD,OAAO,GACzCqD,EAAQlD,KAAK+D,GAEb/C,KAAKlB,SAAS,CACVJ,YAAaA,EAAc,EAC3BiD,KAAMO,IAEVlC,KAAK2C,WAIT9C,EAAIiD,UAAY,QAChBjD,EAAIK,SAAU0B,EAAM/D,EAAER,EAASuE,EAAM9D,EAAET,EAASA,EAASA,GAMzD,IAAI2F,EAAOrB,EAAK,GACMA,EAAKsB,MAAM,GACIC,MAAK,SAAAL,GAAI,OAAIA,EAAKhF,IAAMmF,EAAKnF,GAAKgF,EAAK/E,IAAMkF,EAAKlF,MAEnFkC,KAAKlB,SAAS,CACVX,OAAO,EACP4D,UAAU,EACVrE,WAAW,KAKfsF,EAAKnF,GAAKP,EAAY,IACtB0F,EAAKnF,EAAI,GACTmF,EAAKlF,EAAI,GACTkF,EAAKlF,GAAKN,EAAa,KACnBwC,KAAKlB,SAAS,CACVX,OAAO,EACPT,WAAW,M,4CAKJ,IAAD,OAClByB,SAASC,UAAY,SAACC,GAClB,IAAM,EAAK5B,MAAMqE,qBAAuB,CACpC,OAAQzC,EAAMC,SACV,KAAK,GACgC,YAA7B,EAAK7B,MAAMoE,eACX,EAAK/C,SAAS,CAAC+C,cAAe,WAEtC,MAEA,KAAK,GACgC,aAA7B,EAAKpE,MAAMoE,eACX,EAAK/C,SAAS,CAAC+C,cAAe,UAEtC,MAEA,KAAK,GACgC,WAA7B,EAAKpE,MAAMoE,eACX,EAAK/C,SAAS,CAAC+C,cAAe,YAEtC,MAEA,KAAK,GACgC,UAA7B,EAAKpE,MAAMoE,eACX,EAAK/C,SAAS,CAAC+C,cAAe,aAO1C,EAAK/C,SAAS,CACVgD,sBAAsB,Q,iCA+ElC9B,KAAKlB,SAAS,CACV8C,MAAO,CACH/D,EAAGE,KAAKC,MAAOD,KAAKC,MAAMD,KAAKE,SAAS+B,KAAK1C,aAAc,IAC3DQ,EAAGC,KAAKC,MAAOD,KAAKC,MAAMD,KAAKE,SAAS+B,KAAK1C,aAAc,S,8BAsB9D,IAAD,EAC8B0C,KAAKvC,MAA/BsE,EADJ,EACIA,SAAUrD,EADd,EACcA,YAClByB,cAAcH,KAAKL,aAEnB,IAeIwD,EAfE/C,EAASjB,SAASW,eAAe,UACjCD,EAAMO,EAAOL,WAAW,MAK9B,GAHAF,EAAII,UAAU,EAAG,EAAGG,EAAOC,MAAOD,EAAOE,QACzCT,EAAIe,KAAO,aAEPmB,EAAU,CACV,IAAMxB,EAAM,IAAIC,MAChBD,EAAIE,IAAM,uFAEVF,EAAIG,OAAS,WACTb,EAAIc,UAAUJ,EAAI,EAAE,EAAEH,EAAOC,MAAMD,EAAOE,SAK7B,IAAhB5B,EACDyE,EAAa,iGAEPzE,EAAc,GAAKA,EAAc,GACvCyE,EAAa,8BAEPzE,GAAe,IAAMA,EAAc,GACzCyE,EAAa,yDAEPzE,GAAe,IAAMA,EAAc,GACzCyE,EAAa,8CAEPzE,GAAe,KACrByE,EAAa,mCAGjB,IAAMC,EAAG,uDAAgB1E,GACzBmB,EAAIkB,SAASqC,EAAKhD,EAAOC,MAAM,EAAIR,EAAIiB,YAAYsC,GAAK/C,MAAM,EAAGD,EAAOE,OAAO,GAC/ET,EAAIkB,SAASoC,EAAY/C,EAAOC,MAAM,EAAIR,EAAIiB,YAAYqC,GAAY9C,MAAM,EAAGD,EAAOE,OAAO,EAAE,M,0CAI/F,IAAMF,EAASjB,SAASW,eAAe,UACjCD,EAAMO,EAAOL,WAAW,MAE9BF,EAAIe,KAAO,aACX,IACMC,EAA2BT,EAAOC,MAAM,EAAIR,EAAIiB,YADpC,4GAC2DT,MAAM,EACnFR,EAAIkB,SAFc,2GAEMF,EAA0BT,EAAOE,OAAO,K,2CAK3DN,KAAKvC,MAAMU,MAIZ6B,KAAK7B,QAHL6B,KAAKgB,c,6CAQTb,cAAcH,KAAKL,e,+BAInB,IAAIsB,EACAC,EAYJ,OAVKlB,KAAKvC,MAAMC,WACZuD,EAAe,sBACfC,EAAkB,mBAGlBD,EAAe,eACfC,EAAkB,QAKlB,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,eACX,gGACA,0BAAMA,UAAU,gBAAhB,gDAA0CpB,KAAKvC,MAAMiB,cAEzD,4BAAQ4C,GAAG,SAASF,UAAWF,EAAiBK,IAAI,SAASlB,MAAOL,KAAKzC,MAAMD,YAAagD,OAAQN,KAAKzC,MAAMC,eAC/G,4BAAQ4D,UAAYH,EAAeI,QAASrB,KAAKR,QAAjD,Y,GArTmBgC,IAAMC,W,eCgC1B4B,MA1Bf,WACE,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMkC,GAAG,UAAT,wCACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,mCAEF,yBAAKlC,UAAU,aACb,kBAAC,IAAD,CAAOmC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,4GACpC,kBAAC,IAAD,CACEF,KAAK,UACLE,OAAQ,kBAAM,kBAAC,EAAD,CAAQnG,YAAa,IAAKE,aAAc,SAExD,kBAAC,IAAD,CACE+F,KAAK,SACLE,OAAQ,kBAAM,kBAAC,EAAD,CAAOnG,YAAa,IAAKE,aAAc,cCb/CkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAAStE,SAASW,eAAe,SD6H3C,kBAAmBkE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.024c9f7f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Racing extends React.Component {\r\n\r\n    cellSize = 10; // размер ячейки\r\n    canvasWidth = this.props.canvasWidth;\r\n    canvasHeight= this.props.canvasHeight;\r\n    \r\n    state = {\r\n        gameGoing: false,\r\n        carLocation: 0,\r\n        barriers: [{\r\n            x: 0,\r\n            y: Math.floor((Math.floor(Math.random()*this.canvasWidth))/this.cellSize)*this.cellSize\r\n        }],\r\n        acceleration: false,\r\n        crash: false,\r\n        carOnTheLeft: true,\r\n        carOnTheRight: false,\r\n        maxBarriersAmount: 20,\r\n        carHeight: 4,\r\n        carWidth: 2,\r\n        speed: 5,\r\n        playerScore: 0\r\n    }\r\n\r\n    moveBarriers = () => {\r\n        const { barriers, acceleration, carLocation, carWidth, carHeight, speed, playerScore } = this.state;\r\n        const { cellSize, canvasWidth, canvasHeight } = this;\r\n\r\n        // определяем положение каджого барьера\r\n        for (let i = 0; i < barriers.length; i++) {\r\n\r\n            // если барьер доехал до нижнего края, перемещаем его наверх с новой случайной координатой Х\r\n            if ( barriers[i].y > canvasHeight) {\r\n                this.setState({\r\n                    playerScore: playerScore+1\r\n                });\r\n                barriers[i].y = 0;\r\n                barriers[i].x = Math.floor((Math.floor(Math.random()*canvasWidth))/cellSize)*cellSize;\r\n                \r\n            }\r\n\r\n            // определяем скорость движения (с ускорением или без) с помощью acceleration из state\r\n            if ( !acceleration ) {\r\n                barriers[i].y = barriers[i].y + speed;\r\n            }\r\n            else  {\r\n                barriers[i].y = barriers[i].y + speed + 20;\r\n            }\r\n            \r\n            // проверяем наезд машины на барьер\r\n            if (\r\n                    barriers[i].y >= canvasHeight - carHeight * cellSize\r\n                    && barriers[i].x >= carLocation \r\n                    && barriers[i].x < carLocation + carWidth * cellSize\r\n                ) {\r\n                this.setState({\r\n                    crash: true,\r\n                    gameGoing: false\r\n                })\r\n            }\r\n        }\r\n        \r\n        // ставим барьры в новые положения\r\n        this.setState({\r\n            barriers: barriers\r\n        })\r\n    }\r\n\r\n    addBarrier = () => {\r\n        const { barriers, maxBarriersAmount } = this.state;\r\n\r\n        if( barriers.length < maxBarriersAmount ) {\r\n            barriers.push(\r\n                {\r\n                    x: Math.floor((Math.floor(Math.random()*250))/10)*10,\r\n                    y: 0\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    upSpeed = () => {\r\n        const { speed } = this.state;\r\n\r\n        if( speed < 50 ) {\r\n            this.setState({\r\n                speed: speed + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    steeringWheel = () => {     // рулевое колесо\r\n        const { cellSize } = this;\r\n        document.onkeydown = (event) => {\r\n            switch (event.keyCode) {\r\n                case 37:\r\n                    if ( !this.state.carOnTheLeft ) {\r\n                        this.setState({\r\n                            carLocation: this.state.carLocation - cellSize\r\n                        })\r\n                    }\r\n                break;\r\n\r\n                case 39:\r\n                    if ( !this.state.carOnTheRight ) {\r\n                        this.setState({\r\n                            carLocation: this.state.carLocation + cellSize\r\n                        })\r\n                    }\r\n                break;\r\n\r\n                case 38:\r\n                    this.setState({\r\n                        acceleration: true\r\n                    })\r\n                break;\r\n                \r\n                default: \r\n                break;\r\n            }\r\n        };\r\n        document.onkeyup = (event) => {\r\n            switch (event.keyCode) {\r\n                case 38:\r\n                    this.setState({\r\n                        acceleration: false\r\n                    })\r\n                break;\r\n\r\n                default: \r\n                break;\r\n            }\r\n        };\r\n        \r\n    }\r\n\r\n    drawFrame( carLocation, barriers ) {\r\n        const ctx = document.getElementById('canvas').getContext('2d');\r\n\r\n        const { carWidth, carHeight } = this.state;\r\n        const { cellSize, canvasWidth, canvasHeight } = this;\r\n\r\n        // очищаем канвас перед отрисовкой нового фрейма\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n        // рисуем машину\r\n        ctx.fillRect( carLocation, canvasHeight - carHeight*cellSize, carWidth*cellSize, canvasHeight );\r\n\r\n        // рисуем препятствия\r\n        for (let i = 0; i < this.state.barriers.length; i++) {\r\n            ctx.fillRect(barriers[i].x,barriers[i].y,cellSize,cellSize);\r\n        }\r\n\r\n        // проверка не у левого края ли стоит машина\r\n        if (this.state.carLocation <= 0 && this.state.carOnTheLeft === false) {\r\n            this.setState({\r\n                carOnTheLeft: true\r\n            })\r\n        }\r\n        else if ( this.state.carLocation > 0 && this.state.carOnTheLeft === true ) {\r\n            this.setState({\r\n                carOnTheLeft: false\r\n            })\r\n        }\r\n\r\n        // проверка не у правого края ли стоит машина\r\n        if (this.state.carLocation >= canvasWidth-carWidth*cellSize && this.state.carOnTheRight === false) {\r\n            this.setState({\r\n                carOnTheRight: true\r\n            })\r\n        }\r\n        else if ( this.state.carLocation < canvasWidth-carWidth*cellSize && this.state.carOnTheRight === true ) {\r\n            this.setState({\r\n                carOnTheRight: false\r\n            })\r\n        }\r\n    }\r\n\r\n    letsGo = () => {\r\n        this.setState({\r\n            gameGoing: true,\r\n            carLocation: 0,\r\n            barriers: [],\r\n            acceleration: false,\r\n            crash: false,\r\n            carOnTheLeft: true,\r\n            carOnTheRight: false,\r\n            maxBarriersAmount: 20,\r\n            carHeight: 4,\r\n            carWidth: 2,\r\n            speed: 5,\r\n            playerScore: 0,\r\n        })\r\n        this.steeringWheel();                                             // создаем \"руль\"\r\n        this.intervalMove = setInterval(() => this.moveBarriers(), 50);   // запускаем двигатель барьеров\r\n        this.intervalAdd = setInterval(() => this.addBarrier(), 6000);    // запускаем добавлятель барьеров\r\n        this.intervalSpeed = setInterval(() => this.upSpeed(), 6000);     // увеличиваем скорость\r\n    }\r\n\r\n    crash() {\r\n        // при аварии очищаем интервалы\r\n        clearInterval(this.intervalMove);\r\n        clearInterval(this.intervalAdd);\r\n        clearInterval(this.intervalSpeed);\r\n\r\n        // и рисуем на весь экран картинку аварии\r\n        const canvas = document.getElementById('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        var img = new Image();\r\n        img.src = 'https://image.freepik.com/vector-gratis/bubble-pop-art-of-crash-icon-comunicacion-comica-retro-tema-expresion_18591-10094.jpg';\r\n\r\n        img.onload = function(){\r\n            ctx.drawImage(img,0,0,canvas.width,canvas.height);\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = document.getElementById('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.font = \"18px arial\";\r\n        const startText = 'Для начала нажмите \"GO!\"'\r\n        const textPositionHorizintally = canvas.width/2 - ctx.measureText(startText).width/2\r\n        ctx.fillText(startText, textPositionHorizintally, canvas.height/2);\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { carLocation, barriers } = this.state;\r\n\r\n        if (!this.state.crash) {\r\n            this.drawFrame( carLocation, barriers );\r\n        }\r\n        else {\r\n            this.crash();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalMove);\r\n        clearInterval(this.intervalAdd);\r\n        clearInterval(this.intervalSpeed);\r\n    }\r\n\r\n    render() {\r\n        let btnClassName;\r\n        let canvasClassName;\r\n\r\n        if ( this.state.gameGoing ) {\r\n            btnClassName = 'start-button hidden';\r\n            canvasClassName = 'game no-cursor';\r\n        }\r\n        else {\r\n            btnClassName = 'start-button';\r\n            canvasClassName = 'game';\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='game-header'>\r\n                    <span>Игра: Гонки</span>\r\n                    <span className=\"player-score\">Ваш счет: {this.state.playerScore}</span>\r\n                </div>\r\n                <button className={ btnClassName } onClick={this.letsGo}>GO!</button>\r\n                <canvas id='canvas' className={canvasClassName} ref=\"canvas\" width={this.props.canvasWidth} height={this.props.canvasHeight} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Snake extends React.Component {\r\n\r\n    cellSize = 10; // размер ячейки\r\n    canvasWidth = this.props.canvasWidth;\r\n    canvasHeight= this.props.canvasHeight;\r\n\r\n    state = {\r\n        gameGoing: false,\r\n        body: [],\r\n        apple: {},\r\n        moveDirection: 'toRight',\r\n        moveDirectionChanged: false,\r\n        speed: 1,\r\n        playerScore: 0,\r\n        crash: false,\r\n        uroboros: false,\r\n    }\r\n\r\n    drawFrame() {\r\n\r\n        const ctx = document.getElementById('canvas').getContext('2d');\r\n\r\n        const { body, apple, playerScore } = this.state;\r\n        const { cellSize, canvasWidth, canvasHeight } = this;\r\n\r\n        // очищаем канвас\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n        \r\n        // рисуем змею\r\n        for (let item of body) {\r\n            if (item === body[0]){\r\n                ctx.fillStyle = 'black';\r\n            }\r\n            else{\r\n                ctx.fillStyle = 'brown';\r\n            }\r\n            ctx.fillRect( item.x*cellSize,item.y*cellSize,cellSize,cellSize );\r\n        }\r\n\r\n        /* \r\n            если голова попадает на яблоко - пушим в body дополнительную клетку\r\n            и ставим яблоко на новое место\r\n            и увеличиваем счет игрока\r\n        */\r\n        if ( body[0].x === apple.x && body[0].y === apple.y) {\r\n            let newBody = body;\r\n            let newBodyPart = newBody[newBody.length-1]\r\n            newBody.push(newBodyPart)\r\n            \r\n            this.setState({\r\n                playerScore: playerScore + 1,\r\n                body: newBody // если убрать это строку то ничего не изменится!!! WTF ?!?!?!  *PETYA_HELP*\r\n            })\r\n            this.setApple();\r\n        }\r\n\r\n        // рисуем яблоко\r\n        ctx.fillStyle = 'green';\r\n        ctx.fillRect( apple.x*cellSize,apple.y*cellSize,cellSize,cellSize );\r\n\r\n\r\n        // проверки на аварии\r\n        \r\n        // врезался сам в себя\r\n        let head = body[0];\r\n        let bodyWithoutHead = body.slice(1);\r\n        let crash_uroboros = bodyWithoutHead.find(item => item.x === head.x && item.y === head.y);\r\n        if (crash_uroboros) {\r\n            this.setState({\r\n                crash: true,\r\n                uroboros: true,\r\n                gameGoing: false\r\n            })\r\n        }\r\n\r\n        // голова вышла за пределы канваса\r\n        if (head.x >= canvasWidth/10 ||\r\n            head.x < 0 ||\r\n            head.y < 0 ||\r\n            head.y >= canvasHeight/10 ) {\r\n                this.setState({\r\n                    crash: true,\r\n                    gameGoing: false\r\n                })\r\n            }\r\n    }\r\n\r\n    changeMoveDirection() {\r\n        document.onkeydown = (event) => {\r\n            if ( !this.state.moveDirectionChanged ) { // сменить направление можно только 1 раз за кадр\r\n                switch (event.keyCode) {\r\n                    case 37:\r\n                        if (this.state.moveDirection !== 'toRight'){\r\n                            this.setState({moveDirection: 'toLeft'})\r\n                        }\r\n                    break;\r\n    \r\n                    case 38:\r\n                        if (this.state.moveDirection !== 'toBottom'){\r\n                            this.setState({moveDirection: 'toTop'})\r\n                        }\r\n                    break;\r\n    \r\n                    case 39:\r\n                        if (this.state.moveDirection !== 'toLeft'){\r\n                            this.setState({moveDirection: 'toRight'})\r\n                        }\r\n                    break;\r\n    \r\n                    case 40:\r\n                        if (this.state.moveDirection !== 'toTop'){\r\n                            this.setState({moveDirection: 'toBottom'})\r\n                        }\r\n                    break;\r\n                    \r\n                    default: \r\n                    break;\r\n                }\r\n                this.setState({\r\n                    moveDirectionChanged: true  // ставим стейт что направление было изменено (ставим обратно при отрисовке нового кадра)\r\n                })\r\n            }\r\n        };\r\n    }\r\n\r\n    moveSnake = () => {\r\n        const { body, moveDirection } = this.state;\r\n\r\n        const prevBody = body;\r\n        let newBody = [];\r\n\r\n        switch ( moveDirection ) {\r\n            case 'toRight':\r\n                const toRight_headX = prevBody[0].x+1;  // в каждом кейсе нельзя создавать переменные с одним именем (?)\r\n                const toRight_headY = prevBody[0].y;\r\n                newBody[0] = {\r\n                    x: toRight_headX,\r\n                    y: toRight_headY\r\n                }\r\n                for (let i = 1; i < body.length; i++) {\r\n                    newBody[i] = prevBody[i - 1]\r\n                }\r\n                this.setState({\r\n                    body: newBody\r\n                })\r\n            break;\r\n            case 'toTop':\r\n                const toTop_headX = prevBody[0].x;\r\n                const toTop_headY = prevBody[0].y-1;\r\n                newBody[0] = {\r\n                    x: toTop_headX,\r\n                    y: toTop_headY\r\n                }\r\n                for (let i = 1; i < body.length; i++) {\r\n                    newBody[i] = prevBody[i - 1]\r\n                }\r\n                this.setState({\r\n                    body: newBody\r\n                })\r\n            break;\r\n            case 'toLeft':\r\n                const toLeft_headX = prevBody[0].x-1;\r\n                const toLeft_headY = prevBody[0].y;\r\n                newBody[0] = {\r\n                    x: toLeft_headX,\r\n                    y: toLeft_headY\r\n                }\r\n                for (let i = 1; i < body.length; i++) {\r\n                    newBody[i] = prevBody[i - 1]\r\n                }\r\n                this.setState({\r\n                    body: newBody\r\n                })\r\n            break;\r\n            case 'toBottom':\r\n                const toBottom_headX = prevBody[0].x;\r\n                const toBottom_headY = prevBody[0].y+1;\r\n                newBody[0] = {\r\n                    x: toBottom_headX,\r\n                    y: toBottom_headY\r\n                }\r\n                for (let i = 1; i < body.length; i++) {\r\n                    newBody[i] = prevBody[i - 1]\r\n                }\r\n                this.setState({\r\n                    body: newBody\r\n                })\r\n            break;\r\n\r\n            default:\r\n            break;\r\n        }\r\n        this.setState({\r\n            moveDirectionChanged: false // теперь можно снова сменить направление движения\r\n        })\r\n    }\r\n\r\n    setApple() {\r\n        this.setState({\r\n            apple: {\r\n                x: Math.floor((Math.floor(Math.random()*this.canvasWidth))/10),\r\n                y: Math.floor((Math.floor(Math.random()*this.canvasWidth))/10),\r\n            }\r\n        })\r\n    }\r\n\r\n    letsGo = () => {\r\n        this.setState({\r\n            gameGoing: true,\r\n            body: [\r\n                {x: 1, y: 0},\r\n                {x: 0, y: 0},\r\n            ],\r\n            moveDirection: 'toRight',\r\n            playerScore: 0,\r\n            crash: false,\r\n            uroboros: false\r\n        })\r\n        this.setApple();\r\n        this.intervalAdd = setInterval(() => this.moveSnake(), 100); \r\n        this.changeMoveDirection();\r\n    }\r\n\r\n    crash() {\r\n        const { uroboros, playerScore } = this.state;\r\n        clearInterval(this.intervalAdd);\r\n\r\n        const canvas = document.getElementById('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.font = \"24px arial\";\r\n\r\n        if (uroboros) {\r\n            const img = new Image();\r\n            img.src = 'https://cdn1.radikalno.ru/uploads/2020/1/7/1b7f7d18cc6f6e4d6c13401e8c2c6cfe-full.png';\r\n    \r\n            img.onload = function(){\r\n                ctx.drawImage(img,0,0,canvas.width,canvas.height);\r\n            };\r\n        }\r\n\r\n        let evaluation;\r\n        if ( playerScore === 0 ) {\r\n            evaluation = 'без комментариев...'\r\n        }\r\n        else if ( playerScore > 0 && playerScore < 10 ) {\r\n            evaluation = 'мало...'\r\n        }\r\n        else if ( playerScore >= 10 && playerScore < 20 ) {\r\n            evaluation = 'Нормально'\r\n        }\r\n        else if ( playerScore >= 20 && playerScore < 30) {\r\n            evaluation = 'Неплохо!'\r\n        }\r\n        else if ( playerScore >= 30 ) {\r\n            evaluation = 'Круто!'\r\n        }\r\n\r\n        const txt = `Ваш счет: ${playerScore}`\r\n        ctx.fillText(txt ,canvas.width/2 - ctx.measureText(txt).width/2, canvas.height/2)\r\n        ctx.fillText(evaluation ,canvas.width/2 - ctx.measureText(evaluation).width/2, canvas.height/2+20)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = document.getElementById('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.font = \"18px arial\";\r\n        const startText = 'Для начала нажмите \"GO!\"'\r\n        const textPositionHorizintally = canvas.width/2 - ctx.measureText(startText).width/2\r\n        ctx.fillText(startText, textPositionHorizintally, canvas.height/2);\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.state.crash) {\r\n            this.drawFrame();\r\n        }\r\n        else {\r\n            this.crash();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalAdd);\r\n    }\r\n\r\n    render() {\r\n        let btnClassName;\r\n        let canvasClassName;\r\n\r\n        if ( this.state.gameGoing ) {\r\n            btnClassName = 'start-button hidden';\r\n            canvasClassName = 'game no-cursor';\r\n        }\r\n        else {\r\n            btnClassName = 'start-button';\r\n            canvasClassName = 'game';\r\n        }\r\n\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <div className='game-header'>\r\n                    <span>Игра: Змейка</span>\r\n                    <span className=\"player-score\">Ваш счет: {this.state.playerScore}</span>\r\n                </div>\r\n                <canvas id='canvas' className={canvasClassName} ref=\"canvas\" width={this.props.canvasWidth} height={this.props.canvasHeight} />\r\n                <button className={ btnClassName } onClick={this.letsGo}>GO!</button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Racing from './components/game-racing'\nimport Snake from './components/game-snake'\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"games-container\">\n        <Router>\n          <div className='router-links'>\n            <Link to=\"/snake\">Змейка</Link>\n            <Link to=\"/racing\">Гонки</Link>\n          </div>\n          <div className=\"game-area\">\n            <Route path='/' exact render={() => <h2>Выберите игру</h2>}/>\n            <Route\n              path='/racing'\n              render={() => <Racing canvasWidth={280} canvasHeight={280} />}\n            />\n            <Route\n              path='/snake'\n              render={() => <Snake canvasWidth={280} canvasHeight={280} />}\n            />\n          </div>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}